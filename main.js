let flagMode = false; // –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞

function toggle() {
    flagMode = !flagMode; // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞
    const toggleButton = document.getElementById('toggle');
    toggleButton.textContent = flagMode ? 'üö©' : '1'; // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏ toggle
}

function drawField() {
    const rows = parseInt(document.getElementById('rowsInput').value);
    const cols = parseInt(document.getElementById('colsInput').value);

    if (rows < 5) {
        alert('–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 5');
        return;
    }
    if (cols < 5) {
        alert('–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 5');
        return;
    }
    const buttonContainer = document.getElementById('buttonContainer');
    buttonContainer.innerHTML = '';

    const buttonsData = {}; // –û–±—ä–µ–∫—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –∫–Ω–æ–ø–∫–∞—Ö

    for (let i = 0; i < rows; i++) {
        for (let j = 0; j < cols; j++) {
            const button = document.createElement('button');
            button.textContent = '0';
            const id = `${i * cols + j + 1}`;
            button.id = id;
            const pos = `${i} ${j}`;
            button.setAttribute('data-pos', pos);
            buttonsData[id] = { // –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –∫–Ω–æ–ø–∫–µ
                value: 0,
                revealed: false,
                flagged: false,
                hasBomb: false
            };
            buttonContainer.appendChild(button);
        }
        buttonContainer.appendChild(document.createElement('br'));
    }

    const totalFields = rows * cols;
    const numBombs = Math.max(1, Math.floor(totalFields * 0.13));
    const bombIndices = generateBombIndices(totalFields, numBombs);

    const buttons = document.querySelectorAll('#buttonContainer button');
    bombIndices.forEach(index => {
        const button = buttons[index];
        button.textContent = 'üí£';
        const buttonData = buttonsData[button.id];
        buttonData.hasBomb = true; // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–ª–∞–≥–∞, —á—Ç–æ —É –∫–Ω–æ–ø–∫–∏ –µ—Å—Ç—å –±–æ–º–±–∞
        buttonData.value = 'üí£'; // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –≤ –æ–±—ä–µ–∫—Ç–µ buttonsData
    });


    updateNumbers(buttons, buttonsData, rows, cols);

    buttons.forEach(button => {
        button.style.color = 'transparent';
        button.addEventListener('click', function () {
            handleClick(button, buttonsData); // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞
        });
    });

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ
    function handleClick(button, buttonsData) {
        if (flagMode) { // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Ä–µ–∂–∏–º —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ñ–ª–∞–≥–∞
            const buttonData = buttonsData[button.id];
            if (!buttonData.revealed) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–∫—Ä—ã—Ç–∞ –ª–∏ —É–∂–µ –∫–Ω–æ–ø–∫–∞
                if (buttonData.flagged) { // –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ —É–∂–µ –±—ã–ª–∞ –æ—Ç–º–µ—á–µ–Ω–∞ —Ñ–ª–∞–≥–æ–º
                    button.textContent = buttonData.value; // –£–±–∏—Ä–∞–µ–º —Ñ–ª–∞–≥
                    button.style.color = 'transparent';
                } else {
                    button.textContent = 'üö©'; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥
                    button.style.color = 'black';
                }
                buttonData.flagged = !buttonData.flagged; // –ò–∑–º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–ª–∞–≥–∞ –≤ –æ–±—ä–µ–∫—Ç–µ buttonsData
            }
        } else { // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Ä–µ–∂–∏–º –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–ª–µ—Ç–æ–∫
            const buttonData = buttonsData[button.id];
            if (!buttonData.revealed && !buttonData.flagged) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–∫—Ä—ã—Ç–∞ –ª–∏ —É–∂–µ –∫–Ω–æ–ø–∫–∞ –∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ —Ñ–ª–∞–≥
                // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–ª–µ—Ç–∫–∏ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
                if (buttonData.hasBomb) {
                    button.style.color = 'red';
                    setTimeout(function () {
                        alert('–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!');
                        console.log(buttonsData)
                    }, 0);
                } else if (buttonData.value === 0) {
                    revealEmpty(buttons, buttonsData, button);
                    button.style.color = 'black';
                } else {
                    button.classList.add('revealed');
                    button.style.color = 'blue';
                    buttonData.revealed = true;
                }

                checkWin(buttons, buttonsData);
            }
        }
    }

    function revealEmpty(buttons, buttonsData, button) {
        const pos = button.getAttribute('data-pos').split(' ');
        const row = parseInt(pos[0]);
        const col = parseInt(pos[1]);
        const buttonData = buttonsData[button.id];

        if (buttonData.flagged) {
            return; // –ï—Å–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫–µ —Å—Ç–æ–∏—Ç —Ñ–ª–∞–≥, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏
        }

        buttonData.revealed = true; // Marking the current button as revealed
        button.classList.add('revealed');
        button.style.color = 'black';

        for (let i = row - 1; i <= row + 1; i++) {
            for (let j = col - 1; j <= col + 1; j++) {
                if (i >= 0 && i < rows && j >= 0 && j < cols) {
                    const neighborButton = buttons[i * cols + j];
                    const neighborButtonData = buttonsData[neighborButton.id];
                    if (!neighborButtonData.revealed) {
                        if (neighborButtonData.value === 0) {
                            revealEmpty(buttons, buttonsData, neighborButton);
                        } else {
                            neighborButtonData.revealed = true; // Marking the neighbor button as revealed
                            neighborButton.classList.add('revealed');
                            neighborButton.style.color = 'blue';
                        }
                    }
                }
            }
        }
    }


    function generateBombIndices(totalFields, numBombs) {
        const bombIndices = [];
        while (bombIndices.length < numBombs) {
            const index = Math.floor(Math.random() * totalFields);
            if (!bombIndices.includes(index)) {
                bombIndices.push(index);
            }
        }
        return bombIndices;
    }

    function countBombsAround(buttonsData, row, col, rows, cols) {
        let count = 0;
        for (let i = row - 1; i <= row + 1; i++) {
            for (let j = col - 1; j <= col + 1; j++) {
                if (i >= 0 && i < rows && j >= 0 && j < cols) {
                    const id = i * cols + j + 1;
                    if (buttonsData[id].hasBomb) {
                        count++;
                    }
                }
            }
        }
        return count;
    }

    function updateNumbers(buttons, buttonsData, rows, cols) {
        for (let i = 0; i < rows; i++) {
            for (let j = 0; j < cols; j++) {
                const id = i * cols + j + 1;
                const button = buttons[id - 1];
                const buttonData = buttonsData[id];
                if (!buttonData.hasBomb) {
                    const bombCount = countBombsAround(buttonsData, i, j, rows, cols);
                    if (bombCount > 0) {
                        button.textContent = bombCount.toString();
                        buttonData.value = bombCount;
                    }
                }
            }
        }
    }
}

function checkWin(buttons, buttonsData) {
    let count = 0;
    buttons.forEach(button => {
        const buttonData = buttonsData[button.id];
        if (!buttonData.revealed && !buttonData.hasBomb) {
            count++;
        }
    });
    if (count === 0) {
        alert('–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–±–µ–¥–∏–ª–∏!');
    }
}

function rules() {
    alert('–í –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã —É –∏–≥—Ä–æ–∫–∞ –µ—Å—Ç—å –ø–ª–∞–Ω—à–µ—Ç, –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –∑–∞–∫—Ä—ã—Ç—ã–º–∏ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–º–∏ –ø–æ–ª—è–º–∏. ' +
        '–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–∑ —ç—Ç–∏—Ö –ø–æ–ª–µ–π —Å–∫—Ä—ã–≤–∞—é—Ç –º–∏–Ω—ã, –∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –Ω–µ—Ç. –ó–∞–¥–∞—á–∞ –∏–≥—Ä–æ–∫–∞ ‚Äì –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–¥ –∫–∞–∫–∏–º ' +
        ' –ø–æ–ª–µ–º —Å–∫—Ä—ã–≤–∞–µ—Ç—Å—è –º–∏–Ω–∞ –∏ –ø–æ–º–µ—á–∞—Ç—å —ç—Ç–∏ –ø–æ–ª—è. –ò–≥—Ä–æ–∫ –¥–æ–ª–∂–µ–Ω —Ç–∞–∫–∂–µ –æ—Ç–∫—Ä—ã—Ç—å —Ç–µ –ø–æ–ª—è, –≥–¥–µ –Ω–µ—Ç –º–∏–Ω. ' +
        '–ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø–æ–ª–µ —Å –º–∏–Ω–æ–π, –æ–Ω –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ—Ç. –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø–æ–ª–µ –±–µ–∑ –º–∏–Ω—ã, –ø–æ—è–≤–ª—è–µ—Ç—Å—è –Ω–æ–º–µ—Ä,' +
        ' —É–∫–∞–∑—ã–≤–∞—é—â–∏–π, —Å–∫–æ–ª—å–∫–æ –º–∏–Ω –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –≤–æ—Å—å–º–∏ —Å–æ—Å–µ–¥–Ω–∏—Ö –ø–æ–ª—è—Ö. –ë–∞–∑–∏—Ä—É—è—Å—å –Ω–∞ —ç—Ç–∏—Ö —á–∏—Å–ª–∞—Ö,' +
        ' –∏–≥—Ä–æ–∫ –¥–æ–ª–∂–µ–Ω –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –≥–¥–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –º–∏–Ω—ã. –¶–µ–ª—å –∏–≥—Ä—ã - –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –≤—Å–µ—Ö –º–∏–Ω, –ø–æ—Å—Ä–µ–¥—Å—Ç–≤–æ–º –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–ª–µ–π,' +
        ' –≤ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –º–∏–Ω.');
}

function log() {
    const buttonsData = {}; // –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –∫–Ω–æ–ø–∫–∞—Ö
    const buttons = document.querySelectorAll('#buttonContainer button');

    console.log(`------------------ ${buttons.length} -------------------`);

    buttons.forEach(button => {
        const id = button.id;
        const value = button.textContent;
        buttonsData[id] = {
            value: value,
            revealed: button.classList.contains('revealed'),
            flagged: button.textContent === 'üö©',
            hasBomb: button.textContent === 'üí£'
        };
        console.log(button.textContent);
        console.log(button.id);
    });
    console.log(buttonsData);
}